---
layout: post
title:  "Blinkに革命を"
date:   2021-03-22
image:  021-030/022/top.jpg
tags:  [Arduino, STM32]
---

ども！しろくま＠胡瓜です。今日は偶然にも早起きすることができました。明日いこうは多分続かないと思います。

## ただのBlink

こちらのプログラムに見覚えある人！✌︎('ω'✌︎ )ﾊｰｲ

<script src="https://gist.github.com/shirokuma-89/bd29b40fd23a97bf5a26bc1f187e5ea5.js"></script>

シンプルでいいですね。ではこれは？

<script src="https://gist.github.com/shirokuma-89/cf1656f5608bd8ca5a663960ad7d5f15.js"></script>

ちょっと**美しくない**ですね…。やっぱり美を追求していきたいものです。

こちらのプログラムはどうでしょう。

<script src="https://gist.github.com/shirokuma-89/aa85fcf47aac5758838031b98cdca79b.js"></script>

悪くはないですが、毎回毎回for文を記述するのも面倒ですね。今回はこれをよりスマートに、扱えるようにしていきたいと思います。

## 注意

ここから先はごめんなさい、詳しくまで知る必要はないですがクラスの概念すらわからない人は読んでもちんぷんかんぷんだと思うのでブラウザバックorクラスの解説を読んで戻ってくることを推奨します。

…この先を読んでくれる方はクラスをなんとなくorそれ以上理解している方だと仮定して話を進めていきます。

## 完成品

まずこちらが完成品です。

<script src="https://gist.github.com/shirokuma-89/d4f779792b0e936149f772b8bf85a8de.js"></script>

めっちゃスマートじゃないですか？ちなみにヘッダーファイルはこちらです。

<script src="https://gist.github.com/shirokuma-89/f36c2513bf532e485e530954d8ec56fc.js"></script>

ヘッダーファイルにまとめておくと汎用性もあるので良さそうです。

## 一体何がしたいの？

要するにピンをクラスで管理したいんです。`digitalWrite(ピン番号, 変数)`とするのも、指定したいピンが一つだったらいいですがまとめて指定したい時に面倒ですし、ピンの状態を取得したい時にいちいち`digitalRead(ピン番号)`なんてやってたら時間の無駄です。

クラス化しておくことで代入演算子をオーバーロードすることができます。つまり、9行目の

{% highlight cpp %}
LED = !LED;
{% endhighlight%}

のような**超スマート**な記述が可能になります。美を感じますね。

あとクラスにすることで、オブジェクトの配列を作ることができるというメリットもあります。最初のfor文だらけのプログラムがこの通り。

<script src="https://gist.github.com/shirokuma-89/033183e96f8422b212563525ca8a6125.js"></script>

見た目もすごく綺麗で記述も楽ですね。

## set()とstatus()

これは普通にただの関数です。内部にdigitalWrite()とdigitalRead()を埋め込んであります。

## 演算子のオーバーロード

演算子（+とか*とか）、代入演算子（=とか）とかキャスト演算子（intとかfloatとか）に役割を追加できるというC++の機能です。`digitalOut.h`の20行目から25行目までの部分ですね。

20行目からのやつは、

{% highlight cpp %}
LED = HIGH;
{% endhighlight%}

とした時に

{% highlight cpp %}
LED.set(HIGH);
{% endhighlight%}

と同じ動作をするように **=という記号に新たな意味を付け加える**ための記述です。大事なのでもう一度言います。**=という記号に新たな意味を付け加える**んです。こうすることでいちいちdigitalWr(以下略)みたいに長い文を打たなくてもよくなります。

25行目のやつは、

{% highlight cpp %}
hogehoge = LED;
{% endhighlight %}

が

{% highlight cpp %}
hogehoge = LED.status();
{% endhighlight %}

と同じ動作をするようにするための記述です。インスタンスの名前が呼ばれた時にあたかもそれが変数であるかのように見かけ上は動作します。

これのメリットは、set()なのかstatus()なのかをプログラムを書く側が**意識する必要がなくなる**という点にあります。地味にコーディングが楽になると思います。

## 関数のオーバーロード

8行目から16行目のこの記述に違和感を覚えた人へ。

{% highlight cpp %}
void set(bool val) {
  _pinStatus = val;
  digitalWrite(_pinNumber, val);
}
void set(bool val, int num) {
  for (int i = 0; i < num; i++) {
    (this + i)->set(val);
  }
}
{% endhighlight %}

`void set()`が二回宣言されているんです。確かC言語だとこれエラーになっちゃったはずです。

これの仕組みとしては、引数にbool型の数値が一つだけ与えられたら上の`set()`が呼び出され、引数にbool型の数値とint型の数値の二つが与えられたら下の`set()`が呼び出される仕組みです。これもプログラムが書く側が覚える関数名を減らすことができます。ただ全然違う機能の関数をこんなふうにオーバーロードすると返って可読性が悪くなるのでやめましょう。

先程の以下の記述ができるのは

{% highlight cpp %}
LEDs->set(!LEDs->status(), 3);
{% endhighlight %}

`set()`がオーバーロードされているからです。もし`LED[1]`と`LED[2]`だけに変更を適用させたかったら、

{% highlight cpp %}
LEDs[1].set(/**適用したい値**/, 2);
{% endhighlight %}

こうすればいいのです。

今更感半端ないですが、

{% highlight cpp %}
LEDs->set(/**適用したい値**/, /**適用したい範囲**/);
{% endhighlight %}

と

{% highlight cpp %}
LEDs[0].set(/**適用したい値**/, /**適用したい範囲**/);
{% endhighlight %}

は同じ動作になります。

## まとめ

- ピンはインスタンスごとに管理すると後々楽になる（と思われる）
- オーバーロードでプログラムを書く側の負担を減らそう