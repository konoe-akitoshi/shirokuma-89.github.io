---
layout: post
title:  "Arduinoライブラリをつくった話"
date:   2021-03-26
image:  021-030/023/top.png
tags:  [Arduino, STM32]
---

おはようございます！しろくま＠胡瓜です。今日も6時起き成功しました。習慣化するのは意外と難しいものですね。

## mbedを触ってみた

今までNucleoもArduino言語で開発してきた白熊。Arduino言語は正義みたいなことをよくいう割には、他の言語で開発したことがそもそもないということに気づきました。

食わず嫌いもよくないので、NucleoをMbedなコードでとりあえずLチカしてみることに。さぁて、digitalWriteに当たる関数は何かなぁ。

{% highlight cpp %}myLED = 1;{% endhighlight %}

**えっ、嘘！？！？！？記述が楽すぎない？**

･:*+.\(( °ω° ))/.:+

…

…

あうう…。これは便利すぎる。

## Mbedのデメリット

本気でArduino言語から移行しようかとも**1.0e-10秒くらい**考えたのですが、以下の理由でやめることにしました。

- MbedのコードをArduinoやAVRマイコンに書き込めない
- Arduino言語と比べ情報が少ない

Arduinoを使っている人が多いのはやっぱりそれが**良いもの**だからでしょう。また僕はPlatformIOで開発をするのですが、NucleoやSTM32マイコンにArduino言語のコードを移植するのは非常に容易です。それに対し、MbedなコードをArduinoにビルドして書き込むのは不可という問題があります。これはメインマイコンをSTM32にして、サブマイコンをAVRマイコンを採用する場合などにおいて2つの言語が混在することになり効率的とは言えません。（←Arduino ISPでSPI接続で書き込めるというAVRマイコンの強力な長所を生かすために僕は結構これをやります。）

ということで、Mbedのピン操作を参考にしつつArduino言語でも似たことができるようにライブラリ化してしまえというのが今日のテーマです。

## IO-Kit

本日の主役、IO-Kitです。

<a href="https://github.com/shirokuma-89/IO-Kit" class="Repo"><img src="https://gh-card.dev/repos/shirokuma-89/IO-Kit.svg?fullname="></a>

Arduino言語向けのピン管理ライブラリです。ピンをそれぞれインスタンスごとに管理できるいい感じだと思われるツールです。一応MITライセンスにしてPublicにしました。~~まぁ、こんなゴミライブラリ誰も使わないと思うんですけどね…。~~

こだわったのは、見返した時のコードの**見た目の美しさ**とコーディングするときの**ミスのしにくさ**です。基本的に裏の実装を全部`private:`にして不意に外から書き換えられちゃうことのないようにしました。~~あと、ちょっとカッコつけて全ての変数に`this->`をつけたりしました。~~

Arduino用ライブラリとは謳っていますが実はPlatoformIO＋Nucleo F446REでほぼ全てを開発しました。本家Arduinoではデバッガが使えないのでこちらの方が効率が良かったです。そのためSTM32マイコンとArduino両方で動作確認済みです。

どうでもいいですが、このリポジトリをブログに埋め込むためのカード作るの結構大変でした。外部ツールにいい感じのがあったものの、ライトテーマしかなかったので、CSSの`filter:`でめっちゃ頑張ったんです…。

### 使い方

詳しくはリポジトリのREADMEを読んでください。それだけだとちょっと無責任なので概要だけ。

Lチカのプログラムが以下のプログラムで実装できます。

<script src="https://gist.github.com/shirokuma-89/ce72e0ea26615db856ce726b34ed7c18.js"></script>

なんと楽ちんな。では、ピンをdigitalReadしてSerial出力するプログラムはこちらです。

<script src="https://gist.github.com/shirokuma-89/6ce2ecc136fa5214442b22102d7c3636.js"></script>

いかがでしょうか。やっぱり見た目の美 is very importantですね。

これの例だけだとあまりありがたみがないとは思いますが、こんなチート技みたいなこともできます。

{% highlight cpp %}
myLED1 = myLED2 = HIGH;
{% endhighlight %}

一気に点灯しちゃう技や

{% highlight cpp %}
Input SWITCH[] = {Input(2, OPEN), Input(3,PULLUP)};
Output LED[] = {10, 11};
{% endhighlight %}

このように一気に定義する技など。setup内がpinModeの嵐にならずにすみそうですね。

## 振り返り

「30分の仕事を3秒で終わらせるために3時間かけるのがプログラマ」的な言葉を過去に聞いたことがあるような気がしますが僕の今回やったことはまさにこれな気がしました。今回の開発を通してオーバーロードについて詳しく学ぶことができたのでよかったです。

ではもう眠たくなってきたので今日はこの辺で失礼。（あれ？早起きしたはずじゃ…。）