---
layout: post
title:  "Gitの概念"
date:   2021-01-30
image:  011/top.png
tags:  [Git, GitHub]
---

うわぁぁぁ寒い…。布団から出られないしろくま＠胡瓜です。

今日は僕がGit,GitHubを導入して3年ぐらいたったので、「Gitとは何か？」ということについて偏見バリバリで説明していきたいと思います。

## Note

この記事は、Git,GitHubをほとんど知らない人向けに、「概念を理解してもらう」という目的で書いた記事です。厳密なニュアンスを求める方や、既に使い方がわかっている方、インストール方法が知りたい方はこの記事では満足できないと思うので、ブラウザバック推奨です。

## Gitの目的

[Git](https://git-scm.com/)とはプログラムに特化した**バージョン管理システム**です。例えばこんな風景に見覚えありませんか？

![]({{site.baseurl}}/img/011/001.png)

何月何日とかそういう形式でバックアップを取っていって、うまく動かなくなったら前のやつを復元するという古典的な方式です。経験者はおそらく多いのではないでしょうか。

バックアップを取ることは非常に重要です。全角と半角を一文字間違えるだけ、大文字と小文字を一文字間違えるだけで全てが動かなくなる世界で風任せでプログラミングをするというのは、小規模開発であれば問題ないかもしれませんが、重要なプロジェクトだった場合悲惨な結果を招くことにつながりかねません。

でも、先ほどの画像の状態では管理しづらいですし、また**いつ何を変更したのか**がわかりません。それを解消できるのが今日の主役、**Git**です。

## 概念

Gitの重要な概念は主に二つあります。

- 時間
- 分担する

です。

### 時間

これはいつ変更したかという情報です。イメージとしてはこんな感じです。

> Git: 〇月〇日に白熊が`hogehoge.shiro9`の×行目を変更したよ！
> 
> Git: ×月×日に白熊が`piyopiyo.shiro9`の□行目から※行目までを削除したよ！
> 
> Git: △月△日に白熊が〇月〇日にした「`hogehoge.shiro9`の×行目の変更」を無かったことにしたよ！

なんとなくお分かりいただけましたか。ちなみにこのブログを構築したときの実際の画像がこちらです。

![]({{site.baseurl}}/img/011/002.png)

この赤くなっている行がこの変更で削除された行、緑色の行が追加された行です。

この一回一回の変更のまとまりのことを「コミット」と言います。

実際のコミットの羅列を見て見たい人は[こちら](https://github.com/shirokuma-89/shirokuma-89.github.io/commits/main)からどうぞ。

~~Gitを知っている人が見たら、小まめにコミット出来ておらず、またコミット名が適当でアレルギー反応が出そうになるかもしれないですが、これはチーム開発ではないので、自分のやりたいように楽にやってます。実際の開発はもっとまじめにやってます。~~

### 分担する

これだけでも最低限のバージョン管理を備えていますが、チーム開発となると少し不十分です。そこで「分担する」という概念が生まれてきます。

想像してください。今日は小学校の夏休みの最終日。遊び暮らしていたあなたは宿題が全く終わっていません。そこで、宿題が終わっている友達に泣きついて宿題を手伝ってもらうことにしました。

まずは漢字ドリルから取り組むことにしました。2人で隣り合わせに座って、同時に**一冊の漢字ドリル**に文字を書いていきます。肩や手はぶつかり合うし、字の癖が二人とも全然違うのでこのまま提出したとしても、宿題をズルして終わらせたことが先生にばれてしまうかもしれません。そしてなにより**効率が悪い**です。

そこで、自分は漢字ドリル、友達は計算ドリルと分担することにしました。自分は文系で友達は理系と得意分野を生かせて、また肩や手が干渉しずにスムーズに進めることができます。

これがGitで欠かせない**分担する**という概念です。

まずプロジェクトを丸々コピーして、作業場所を増やします。この作業部屋のことを「ブランチ」（日本語で枝という意味です）と言います。

![]({{site.baseurl}}/img/011/003.png)

そして、新しくできた作業部屋で作業をします。先ほどの例で言うと宿題を進めるシーンです。

最後に、出来た宿題をランドセルに詰める必要があります。いわば分担してやった課題を**統合する**ということです。図にするとこんな感じです。

![]({{site.baseurl}}/img/011/004.png)

この統合するという作業を「マージ」と言います。

で、このブランチ機能の何がすごいかというと、複数人で開発するときに作業部屋を分けられるので干渉が起こりづらくなります。

![]({{site.baseurl}}/img/011/005.png)

ここで先ほどの時間の概念を思い出してみてください。変更されたファイルだけでなく、「何行目がどう変更されたか」まで記録されていましたよね。このマージの作業では、ただファイルを丸ごともとの作業部屋に移すのではなく、**「何行目がどう変更されたか」という部分を取り込む**ので、複数人で開発をしているときに**干渉することなくプログラムを統合できる**という強力な利点が生まれます。

ブランチは一人だけで開発するときにも強力な味方になってくれます。例えばあるゲームを作りたいとして、「ゲーム中の画面」、「ランキング画面」、「裏のシステム」など目的別に作業部屋を作ることができるのです。

また、もし開発中にバグが発生してどうしようもなくなった場合、過去のコミットをなかったことにしたり、そもそもブランチごと無かったことにして、本番環境にバグが入り込むのを防ぐことができます。

## GitHubとは

このGitのシステムをより便利にするために生まれたのが[GitHub](https://github.com/)です。Gitだけでは自分のパソコンだけでしかブランチを作成したり、統合したりという作業が出来ません。

そこである人が、プログラムをクラウド管理して「作業するときは自分のパソコンに取り込んで、作業が終わったらクラウドに変更を反映させる」という天才的な方法を考え出しました。それを可能にするのがGitHubです。

![]({{site.baseurl}}/img/011/006.png)

GitHubの他にも有名どころでは

- GitLab
- BitBucket

等があるようです。僕はGitHubとGitLab以外使ったことないです。

ちなみに、この「クラウドで管理する」というのを裏技的に使っているのがこのGitHub Pagesつまり当ブログです。

これまでの「作業場所」や「ファイル」などのプロジェクトをを全てひとまとめにして「リポジトリ」と言います。

このリポジトリを公開するかしないかは自分で決められるので、みんなの役に立ってほしいと思っての開発であれば公開して自由に使ってもらうこともできますし、チームメンバーだけで共有したいものであれば非公開リポジトリにすることもできます。

## まとめ

- Gitで大事な概念は「時間」と「分担」
- GitHubはGitをより使いやすくするためのもの

以上です。間違い等あれば指摘宜しくお願いします。長文ですが読んでくださってありがとうございました！